plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2023.0.1")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'application'

	repositories {
		mavenCentral()
	}

	dependencies {
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
	}

	test {
		useJUnitPlatform()
	}

	bootRun {
		doFirst {
			def pidFile = file("${project.buildDir}/pid/${project.name}.pid")
			pidFile.parentFile.mkdirs()
			pidFile.withWriter { writer ->
				writer << java.lang.management.ManagementFactory.getRuntimeMXBean().getName().split("@")[0]
			}
		}
	}

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}
}

tasks.register('runAll') {
	doFirst {
		println "Starting all services..."
	}
	subprojects.each { subproject ->
		if (subproject.plugins.hasPlugin('org.springframework.boot')) {
			doLast {
				exec {
					commandLine 'cmd', '/c', "start", "gradlew", "-p", "${subproject.projectDir}", "bootRun"
				}
			}
		}
	}
	doLast {
		println "All services started."
	}
}

tasks.register('stopAll') {
	doFirst {
		println "Stopping all services..."
	}
	subprojects.each { subproject ->
		if (subproject.plugins.hasPlugin('org.springframework.boot')) {
			doLast {
				def pidFile = file("${subproject.buildDir}/pid/${subproject.name}.pid")
				if (pidFile.exists()) {
					def pid = pidFile.text.trim()
					println "Stopping ${subproject.name} with PID ${pid}..."
					try {
						"taskkill /PID ${pid} /F".execute().waitFor()
						pidFile.delete()
					} catch (Exception e) {
						println "Failed to stop ${subproject.name}: ${e.message}"
					}
				} else {
					println "PID file for ${subproject.name} not found."
				}
			}
		}
	}
	doLast {
		println "All services stopped."
	}
}
